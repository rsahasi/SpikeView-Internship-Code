var view = UILabel()
view.frame = CGRect(x: 0, y: 0, width: 547.5, height: 101)
view.backgroundColor = .white
 
var shadows = UIView()
shadows.frame = view.frame
shadows.clipsToBounds = false
view.addSubview(shadows)
 
let shadowPath0 = UIBezierPath(roundedRect: shadows.bounds, cornerRadius: 6)
let layer0 = CALayer()
layer0.shadowPath = shadowPath0.cgPath
layer0.shadowColor = UIColor(red: 0, green: 0, blue: 0, alpha: 0.1).cgColor
layer0.shadowOpacity = 1
layer0.shadowRadius = 25
layer0.shadowOffset = CGSize(width: 0, height: 14)
layer0.bounds = shadows.bounds
layer0.position = shadows.center
shadows.layer.addSublayer(layer0)
 
var shapes = UIView()
shapes.frame = view.frame
shapes.clipsToBounds = true
view.addSubview(shapes)
 
let layer1 = CALayer()
layer1.backgroundColor = UIColor(red: 1, green: 1, blue: 1, alpha: 1).cgColor
layer1.bounds = shapes.bounds
layer1.position = shapes.center
shapes.layer.addSublayer(layer1)
 
shapes.layer.cornerRadius = 6
 
var parent = self.view!
parent.addSubview(view)
view.translatesAutoresizingMaskIntoConstraints = false
view.widthAnchor.constraint(equalToConstant: 547.5).isActive = true
view.heightAnchor.constraint(equalToConstant: 101).isActive = true
view.leadingAnchor.constraint(equalTo: parent.leadingAnchor, constant: 115).isActive = true
view.topAnchor.constraint(equalTo: parent.topAnchor, constant: 180).isActive = true
